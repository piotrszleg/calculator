import java.io.PrintWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.FileNotFoundException;

class FunctionsListGenerator {
    
    static final String beginning=String.join(System.lineSeparator(),
    "import java.util.Map;",
    "import java.util.HashMap;",
    "import java.util.function.*;",
    "",
    "// File generated by FunctionsListGenerator.java",
    "",
    "public class FunctionsList {",
    "    public Map<String, Double> constants=new HashMap<String, Double>();",
    "    public Map<String, Function<Double, Double>> oneArgumentFunctions=new HashMap<String, Function<Double, Double>>();",
    "    public Map<String, BiFunction<Double, Double, Double>> twoArgumentsFunctions=",
    "           new HashMap<String, BiFunction<Double, Double, Double>>();",
    "    FunctionsList(){");
    static final String end=String.join(System.lineSeparator(),
    "   }",
    "   static FunctionsList instance;",
    "   public static FunctionsList getInstance(){",
    "       if(instance==null){",
    "           instance=new FunctionsList();",
    "       }",
    "       return instance;",
    "   }",
    "}");
    static final String constants="PI E";
    static final String oneArgumentFunctions="sin cos abs";
    static final String twoArgumentsFunctions="pow min max";
    static final String outputFile="FunctionsList.java";
    public static void main(String[] args) throws FileNotFoundException, IOException {
        PrintWriter file=new PrintWriter(outputFile);
        file.println(beginning);
        for(String constant : constants.split(" ")){
            file.printf("constants.put(\"%s\", Math.%s);\n", constant, constant);
        }
        for(String function : oneArgumentFunctions.split(" ")){
            file.printf("oneArgumentFunctions.put(\"%s\", Math::%s);\n", function, function);
        }
        for(String function : twoArgumentsFunctions.split(" ")){
            file.printf("twoArgumentsFunctions.put(\"%s\", Math::%s);\n", function, function);
        }
        file.print("oneArgumentFunctions.put(\"ln\", Math::log);\n");
        String logFunction="(Double a, Double b)->Math.log(a)/Math.log(b)";
        file.printf("twoArgumentsFunctions.put(\"log\", %s);\n", logFunction);
        file.println(end);
        file.close();
    }
}